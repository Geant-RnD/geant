+-------------------------------------------+
| How to run examples under GUTracking/test |
+-------------------------------------------+

1. setup 

   #gcc (if 4.8+ is not a default)
   export CXX=/usr/local/gcc-4.8.2/bin/g++
   export CC=/usr/local/gcc-4.8.2/bin/gcc
   export LD_LIBRARY_PATH=/usr/local/gcc-4.8.2/lib64:${LD_LIBRARY_PATH}
   
   #vc (minimal)
   export Vc_DIR=${VC_INSTALL_DIR}
   #VecGeom (not required)
   #export VecGeom_DIR=${VECGEOM_INSTALL_DIR}

   #root (if ROOT=ON)
   source ${ROOT_INSTALL_DIR}/bin/thisroot.sh

2. How to build and run an example benchmaker of GUTracking/test

   mkdir build
   cd build
   cmake -DBENCHMARK=ON -DCUDA=ON -DVc_DIR=${Vc_DIR} ..
   make
   ./GUModelBenchmark [ntracks] [nrepetitions]

2.1 data file
   Download required data files for testing the SeltzerBerger model
   wget http://geant4.cern.ch/support/source/G4EMLOW.6.42.tar.gz 
   tar xzf G4EMLOW.6.42.tar.gz brem_SB
   mkdir data ; cp -r G4EMLOW6.42/brem_SB data/brem_SB
  (will introduce the env for the target data directory and put an option
   to get the file through cmake configuration)

3. Other important options

   # turn on histogramming (with BENCHMARK=ON)
   -DROOT=ON

   # set a vector instruction set
   -DVECPHYS_VECTOR=sse

4. How to run GeantV with GUTracking (libvecphys.a)
   
   - build your physics library (libvecphys) into GUTracking/build
   - build GeantV with a -DUSE_VECPHYS=ON option whch will build a libVphysproc 

   - activate following the two lines in run.C:

   gSystem->Load("../lib/libVphysproc"); //to load the vector physics interface lib
   prop->fVectorPhysicsProcess = new GVectorPhysicsProcess(prop->fEmin, nthreads);

  - run the prototype

    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/phihome/syjun/products.vproot6
    root.exe -b -l -q 'run.C(4)'

5. How to build and run the benchmaker (GUModelBenchmark) on Intel Xeon Phi
   
export COMP_FLAGS="-DBENCHMARK=ON -DROOT=OFF -DVc_DIR=path_to_icc_Vc"
export CXX_FLAGS="-mmic"
export C_FLAGS="$CXX_FLAGS"

cmake ../ -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc \
          -DCMAKE_C_FLAGS="$C_FLAGS" -DCMAKE_CXX_FLAGS="$CXX_FLAGS" $COMP_FLAGS

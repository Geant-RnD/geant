

                            G4validation
                            ------------

This example simulates a simple cylindrical homogeneous (crystal)
setup.  This is also typically refered to as the simplified cmsExp
geometry.  No magnetic field is defined in this setup.

  Note: this setup was developed from Geant4 example N03, hence one
    can easily find some references to N03 detector inside the source
    code and macros.  Most of the original features from N03 have been
    disabled in the adaptation process, but the macros were left here
    for possible fixing in the future (?)


 1- GEOMETRY DEFINITION
 
   The calorimeter is a cylinder made of three radial layers and three
   identical cylinder blocks along the z-axis.  The material is PbWO4.

   A simple uniform magnetic field can be enabled in this setup, but
   it is currently disabled by default.
 	
   The default geometry is constructed in DetectorConstruction class.
	

 2- AN EVENT: THE PRIMARY GENERATOR
 
   The primary kinematic consists of a number of particles which magically
   start randomly positioned inside a restricted region inside the calorimeter 
   cylinder.  This is because each track will have a single step processed,
   and this way this step is forced to be inside the material, and far from
   any geometry interface.

   Each particle kinematics can be randomly set in the
   PrimaryGeneratorAction class, and can also be read from ASCII files
   (default).  If the ParticleGun class is used, the G4 build-in
   commands of that class can be used to define particle type and
   kinematics.  See some examples in the macros subdirectory (not fully
   tested, maybe buggy!)

   In addition one can choose randomly the impact point of the incident
   particle. The corresponding interactive command is built in
   PrimaryGeneratorMessenger class (see run2.mac).
 	
   A RUN is a set of events.


 3- PHYSICS LISTS
 
   The particle's type and the physic processes which will be available
   in this example are set in PhysicsList* classes.
 
   In addition the build-in interactive command:
	         /process/(in)activate processName
   allows to activate/inactivate the processes one by one.
   Then one can well visualize the processes one by one, especially 
   in the bubble chamber setup with a transverse magnetic field.
   (see run2.mac and newgeom.mac)


 4- RANDOM NUMBERS HANDLING

   CLHEP provides several random number engines. In this example the Ranecu
   engine is choosen at beginning of the main (G4validation.cc).

   By default, G4RunManager does not save the rndm seed.
   To do so the user must set in BeginOfRunAction:
   G4RunManager::GetRunManager()->SetRandomNumberStore(true);
	
   Then the rndm seed is systematically saved at beginning of run
   (currentRun.rndm) and beginning of event (currentEvent.rndm)
   Therefore, in case of abnormal end, the seed of the last event processed
   is available in currentEvent.rndm
	
   Even in case of normal run processing, the user may wish to preserve the
   rndm seed of selected events. At any time in the event, put the
   following statement:
   if (condition) G4RunManager::GetRunManager()->rndmSaveThisEvent();
   currentEvent.rndm will be copied to runXXevntYY.rndm
   (see SteppingActionBrem::UserSteppingAction() 

   To restart a run from a given rndm seed, use the UI command:
   /random/resetEngineFrom  fileName 

   The macro rndmSeed.mac shows how to save and reset the random number
   seed between runs, from UI commands.	
